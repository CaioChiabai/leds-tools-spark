import { type Module, inject } from 'langium';
import { createDefaultModule, createDefaultSharedModule, type DefaultSharedModuleContext, type LangiumServices, type LangiumSharedServices, type PartialLangiumServices } from 'langium/lsp';
import { R2D2GeneratedModule, R2D2GeneratedSharedModule } from './generated/module.js';
import { R2D2Validator, registerValidationChecks } from './r-2-d-2-validator.js';
import { CustomScopeComputation } from './r-2-d-3-scope.js';
/**
 * Declaration of custom services - add your own service classes here.
 */
export type R2D2AddedServices = {
    validation: {
        R2D2Validator: R2D2Validator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type R2D2Services = LangiumServices & R2D2AddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const R2D2Module: Module<R2D2Services, PartialLangiumServices & R2D2AddedServices> = {
    references:{
        ScopeComputation: (services) => new CustomScopeComputation(services)
    },
    validation: {
        R2D2Validator: () => new R2D2Validator()
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createR2D2Services(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    R2D2: R2D2Services
} {
    const shared = inject(
        createDefaultSharedModule(context),
        R2D2GeneratedSharedModule
    );
    const R2D2 = inject(
        createDefaultModule({ shared }),
        R2D2GeneratedModule,
        R2D2Module
    );
    shared.ServiceRegistry.register(R2D2);
    registerValidationChecks(R2D2);
    return { shared, R2D2 };
}
