"use strict";
/******************************************************************************
 * This file was generated by langium-cli 3.0.3.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.reflection = exports.SPARKAstReflection = exports.UseCasesModel = exports.UseCase = exports.Parameter = exports.OneToOne = exports.OneToMany = exports.ModuleImport = exports.Module = exports.Model = exports.ManyToOne = exports.ManyToMany = exports.LocalEntity = exports.ImportedEntity = exports.FunctionEntity = exports.Event = exports.EnumX = exports.EnumEntityAtribute = exports.Element = exports.Configuration = exports.AttributeEnum = exports.Attribute = exports.Actor = exports.UseCaseElements = exports.Relation = exports.Entity = exports.AbstractElement = exports.SPARKTerminals = void 0;
exports.isAbstractElement = isAbstractElement;
exports.isDATATYPE = isDATATYPE;
exports.isEntity = isEntity;
exports.isFEATURE_TYPE = isFEATURE_TYPE;
exports.isLANGUAGETYPE = isLANGUAGETYPE;
exports.isQualifiedName = isQualifiedName;
exports.isQualifiedNameWithWildcard = isQualifiedNameWithWildcard;
exports.isRelation = isRelation;
exports.isUseCaseElements = isUseCaseElements;
exports.isActor = isActor;
exports.isAttribute = isAttribute;
exports.isAttributeEnum = isAttributeEnum;
exports.isConfiguration = isConfiguration;
exports.isElement = isElement;
exports.isEnumEntityAtribute = isEnumEntityAtribute;
exports.isEnumX = isEnumX;
exports.isEvent = isEvent;
exports.isFunctionEntity = isFunctionEntity;
exports.isImportedEntity = isImportedEntity;
exports.isLocalEntity = isLocalEntity;
exports.isManyToMany = isManyToMany;
exports.isManyToOne = isManyToOne;
exports.isModel = isModel;
exports.isModule = isModule;
exports.isModuleImport = isModuleImport;
exports.isOneToMany = isOneToMany;
exports.isOneToOne = isOneToOne;
exports.isParameter = isParameter;
exports.isUseCase = isUseCase;
exports.isUseCasesModel = isUseCasesModel;
const langium_1 = require("langium");
exports.SPARKTerminals = {
    WS: /\s+/,
    ID: /[_a-zA-Z][\w_]*/,
    INT: /[0-9]+/,
    STRING: /"[^"]*"|'[^']*'/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};
exports.AbstractElement = 'AbstractElement';
function isAbstractElement(item) {
    return exports.reflection.isInstance(item, exports.AbstractElement);
}
function isDATATYPE(item) {
    return item === 'string' || item === 'integer' || item === 'decimal' || item === 'datetime' || item === 'date' || item === 'boolean' || item === 'uuid' || item === 'email' || item === 'cpf' || item === 'cnpj' || item === 'zipcode' || item === 'currency' || item === 'mobilePhoneNumber' || item === 'phoneNumber' || item === 'file' || item === 'void';
}
exports.Entity = 'Entity';
function isEntity(item) {
    return exports.reflection.isInstance(item, exports.Entity);
}
function isFEATURE_TYPE(item) {
    return item === 'authentication';
}
function isLANGUAGETYPE(item) {
    return item === 'python' || item === 'java' || item === 'csharp-minimal-api' || item === 'csharp-clean-architecture';
}
function isQualifiedName(item) {
    return typeof item === 'string';
}
function isQualifiedNameWithWildcard(item) {
    return typeof item === 'string';
}
exports.Relation = 'Relation';
function isRelation(item) {
    return exports.reflection.isInstance(item, exports.Relation);
}
exports.UseCaseElements = 'UseCaseElements';
function isUseCaseElements(item) {
    return exports.reflection.isInstance(item, exports.UseCaseElements);
}
exports.Actor = 'Actor';
function isActor(item) {
    return exports.reflection.isInstance(item, exports.Actor);
}
exports.Attribute = 'Attribute';
function isAttribute(item) {
    return exports.reflection.isInstance(item, exports.Attribute);
}
exports.AttributeEnum = 'AttributeEnum';
function isAttributeEnum(item) {
    return exports.reflection.isInstance(item, exports.AttributeEnum);
}
exports.Configuration = 'Configuration';
function isConfiguration(item) {
    return exports.reflection.isInstance(item, exports.Configuration);
}
exports.Element = 'Element';
function isElement(item) {
    return exports.reflection.isInstance(item, exports.Element);
}
exports.EnumEntityAtribute = 'EnumEntityAtribute';
function isEnumEntityAtribute(item) {
    return exports.reflection.isInstance(item, exports.EnumEntityAtribute);
}
exports.EnumX = 'EnumX';
function isEnumX(item) {
    return exports.reflection.isInstance(item, exports.EnumX);
}
exports.Event = 'Event';
function isEvent(item) {
    return exports.reflection.isInstance(item, exports.Event);
}
exports.FunctionEntity = 'FunctionEntity';
function isFunctionEntity(item) {
    return exports.reflection.isInstance(item, exports.FunctionEntity);
}
exports.ImportedEntity = 'ImportedEntity';
function isImportedEntity(item) {
    return exports.reflection.isInstance(item, exports.ImportedEntity);
}
exports.LocalEntity = 'LocalEntity';
function isLocalEntity(item) {
    return exports.reflection.isInstance(item, exports.LocalEntity);
}
exports.ManyToMany = 'ManyToMany';
function isManyToMany(item) {
    return exports.reflection.isInstance(item, exports.ManyToMany);
}
exports.ManyToOne = 'ManyToOne';
function isManyToOne(item) {
    return exports.reflection.isInstance(item, exports.ManyToOne);
}
exports.Model = 'Model';
function isModel(item) {
    return exports.reflection.isInstance(item, exports.Model);
}
exports.Module = 'Module';
function isModule(item) {
    return exports.reflection.isInstance(item, exports.Module);
}
exports.ModuleImport = 'ModuleImport';
function isModuleImport(item) {
    return exports.reflection.isInstance(item, exports.ModuleImport);
}
exports.OneToMany = 'OneToMany';
function isOneToMany(item) {
    return exports.reflection.isInstance(item, exports.OneToMany);
}
exports.OneToOne = 'OneToOne';
function isOneToOne(item) {
    return exports.reflection.isInstance(item, exports.OneToOne);
}
exports.Parameter = 'Parameter';
function isParameter(item) {
    return exports.reflection.isInstance(item, exports.Parameter);
}
exports.UseCase = 'UseCase';
function isUseCase(item) {
    return exports.reflection.isInstance(item, exports.UseCase);
}
exports.UseCasesModel = 'UseCasesModel';
function isUseCasesModel(item) {
    return exports.reflection.isInstance(item, exports.UseCasesModel);
}
class SPARKAstReflection extends langium_1.AbstractAstReflection {
    getAllTypes() {
        return ['AbstractElement', 'Actor', 'Attribute', 'AttributeEnum', 'Configuration', 'Element', 'Entity', 'EnumEntityAtribute', 'EnumX', 'Event', 'FunctionEntity', 'ImportedEntity', 'LocalEntity', 'ManyToMany', 'ManyToOne', 'Model', 'Module', 'ModuleImport', 'OneToMany', 'OneToOne', 'Parameter', 'Relation', 'UseCase', 'UseCaseElements', 'UseCasesModel'];
    }
    computeIsSubtype(subtype, supertype) {
        switch (subtype) {
            case exports.Actor:
            case exports.UseCase: {
                return this.isSubtype(exports.UseCaseElements, supertype);
            }
            case exports.EnumX:
            case exports.Module: {
                return this.isSubtype(exports.AbstractElement, supertype);
            }
            case exports.ImportedEntity:
            case exports.LocalEntity: {
                return this.isSubtype(exports.Entity, supertype);
            }
            case exports.ManyToMany:
            case exports.ManyToOne:
            case exports.OneToMany:
            case exports.OneToOne: {
                return this.isSubtype(exports.Relation, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Actor:superType':
            case 'UseCase:actors': {
                return exports.Actor;
            }
            case 'Configuration:entity':
            case 'LocalEntity:superType':
            case 'ManyToMany:type':
            case 'ManyToOne:type':
            case 'OneToMany:type':
            case 'OneToOne:type': {
                return exports.Entity;
            }
            case 'EnumEntityAtribute:type': {
                return exports.EnumX;
            }
            case 'Event:depends': {
                return exports.Event;
            }
            case 'ManyToMany:by': {
                return exports.LocalEntity;
            }
            case 'UseCase:superType': {
                return exports.UseCase;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case 'Actor': {
                return {
                    name: 'Actor',
                    properties: [
                        { name: 'comment' },
                        { name: 'fullName' },
                        { name: 'id' },
                        { name: 'superType' }
                    ]
                };
            }
            case 'Attribute': {
                return {
                    name: 'Attribute',
                    properties: [
                        { name: 'blank', defaultValue: false },
                        { name: 'comment' },
                        { name: 'fullName' },
                        { name: 'max' },
                        { name: 'min' },
                        { name: 'name' },
                        { name: 'type' },
                        { name: 'unique', defaultValue: false }
                    ]
                };
            }
            case 'AttributeEnum': {
                return {
                    name: 'AttributeEnum',
                    properties: [
                        { name: 'comment' },
                        { name: 'fullName' },
                        { name: 'name' }
                    ]
                };
            }
            case 'Configuration': {
                return {
                    name: 'Configuration',
                    properties: [
                        { name: 'database_name' },
                        { name: 'description' },
                        { name: 'entity' },
                        { name: 'feature' },
                        { name: 'language' },
                        { name: 'name' },
                        { name: 'package_path' }
                    ]
                };
            }
            case 'Element': {
                return {
                    name: 'Element',
                    properties: [
                        { name: 'comment' },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case 'EnumEntityAtribute': {
                return {
                    name: 'EnumEntityAtribute',
                    properties: [
                        { name: 'comment' },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case 'EnumX': {
                return {
                    name: 'EnumX',
                    properties: [
                        { name: 'attributes', defaultValue: [] },
                        { name: 'comment' },
                        { name: 'name' }
                    ]
                };
            }
            case 'Event': {
                return {
                    name: 'Event',
                    properties: [
                        { name: 'action' },
                        { name: 'depends', defaultValue: [] },
                        { name: 'description' },
                        { name: 'id' },
                        { name: 'name_fragment' }
                    ]
                };
            }
            case 'FunctionEntity': {
                return {
                    name: 'FunctionEntity',
                    properties: [
                        { name: 'comment' },
                        { name: 'name' },
                        { name: 'paramters', defaultValue: [] },
                        { name: 'response' }
                    ]
                };
            }
            case 'ImportedEntity': {
                return {
                    name: 'ImportedEntity',
                    properties: [
                        { name: 'name' }
                    ]
                };
            }
            case 'LocalEntity': {
                return {
                    name: 'LocalEntity',
                    properties: [
                        { name: 'attributes', defaultValue: [] },
                        { name: 'comment' },
                        { name: 'enumentityatributes', defaultValue: [] },
                        { name: 'functions', defaultValue: [] },
                        { name: 'is_abstract', defaultValue: false },
                        { name: 'name' },
                        { name: 'relations', defaultValue: [] },
                        { name: 'superType' }
                    ]
                };
            }
            case 'ManyToMany': {
                return {
                    name: 'ManyToMany',
                    properties: [
                        { name: 'by' },
                        { name: 'comment' },
                        { name: 'fullName' },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case 'ManyToOne': {
                return {
                    name: 'ManyToOne',
                    properties: [
                        { name: 'comment' },
                        { name: 'fullName' },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    properties: [
                        { name: 'abstractElements', defaultValue: [] },
                        { name: 'configuration' }
                    ]
                };
            }
            case 'Module': {
                return {
                    name: 'Module',
                    properties: [
                        { name: 'comment' },
                        { name: 'elements', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case 'ModuleImport': {
                return {
                    name: 'ModuleImport',
                    properties: [
                        { name: 'entities', defaultValue: [] },
                        { name: 'library' },
                        { name: 'name' },
                        { name: 'package_path' }
                    ]
                };
            }
            case 'OneToMany': {
                return {
                    name: 'OneToMany',
                    properties: [
                        { name: 'comment' },
                        { name: 'fullName' },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case 'OneToOne': {
                return {
                    name: 'OneToOne',
                    properties: [
                        { name: 'comment' },
                        { name: 'fullName' },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case 'Parameter': {
                return {
                    name: 'Parameter',
                    properties: [
                        { name: 'comment' },
                        { name: 'element' }
                    ]
                };
            }
            case 'UseCase': {
                return {
                    name: 'UseCase',
                    properties: [
                        { name: 'actors', defaultValue: [] },
                        { name: 'comment' },
                        { name: 'description' },
                        { name: 'events', defaultValue: [] },
                        { name: 'id' },
                        { name: 'name_fragment' },
                        { name: 'superType' }
                    ]
                };
            }
            case 'UseCasesModel': {
                return {
                    name: 'UseCasesModel',
                    properties: [
                        { name: 'comment' },
                        { name: 'elements', defaultValue: [] },
                        { name: 'id' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}
exports.SPARKAstReflection = SPARKAstReflection;
exports.reflection = new SPARKAstReflection();
